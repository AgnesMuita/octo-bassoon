# Generated by Django 3.2.7 on 2021-12-14 11:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import students.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(db_column='first_name', max_length=100)),
                ('middle_name', models.CharField(blank=True, db_column='middle_name', max_length=100, null=True)),
                ('last_name', models.CharField(db_column='last_name', max_length=100)),
                ('date_of_birth', models.CharField(blank=True, db_column='date_of_birth', max_length=100, null=True)),
                ('gender', models.CharField(db_column='gender', max_length=100)),
                ('user_name', models.CharField(blank=True, db_column='user_name', editable=False, max_length=100, null=True, unique=True)),
                ('secondary_school', models.CharField(db_column='secondary_school', max_length=100)),
                ('county', models.CharField(db_column='county', max_length=100)),
                ('password', models.CharField(blank=True, db_column='password', editable=False, max_length=100, null=True)),
                ('user_photo', models.FileField(blank=True, db_column='user_photo', editable=False, max_length=1000, null=True, upload_to=students.models.getFilePath)),
                ('login_status', models.BooleanField(blank=True, db_column='login_status', default=0, editable=False, null=True)),
                ('account_status', models.IntegerField(blank=True, db_column='account_status', default=0, editable=False, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('date_added', models.BigIntegerField(blank=True, db_column='date_added', editable=False)),
                ('last_modified', models.BigIntegerField(blank=True, db_column='last_modified', editable=False)),
                ('deleted', models.BooleanField(blank=True, db_column='deleted', default=False, editable=False)),
                ('contact_id', models.AutoField(db_column='contact_id', editable=False, primary_key=True, serialize=False)),
                ('contact_type', models.CharField(db_column='contact_type', max_length=100)),
                ('contact_class', models.CharField(db_column='contact_class', max_length=100)),
                ('contact', models.CharField(db_column='contact', max_length=1000)),
                ('owner_type', models.CharField(db_column='owner_type', max_length=100)),
                ('owner_id', models.CharField(blank=True, db_column='owner_id', editable=False, max_length=1000)),
                ('added_by', models.ForeignKey(blank=True, db_column='added_by', editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contactauthors', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, db_column='modified_by', editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contactmodifiers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'contacts',
            },
        ),
    ]
